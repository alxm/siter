#!/usr/bin/env python

"""
    Copyright 2011 Alex Margarit

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os, re, sys, time

class Block:
    def __init__(self, index, text):
        # Block including (( and ))
        self.whole = text

        # Just the inside of (( * ))
        self.content = text[2 : -2].strip()

    @staticmethod
    def extract_blocks(text):
        # A block is a root-level ((something))
        blocks = []
        start = 0

        while True:
            index = text.find("((", start)

            if index == -1:
                break

            count = 1

            last_open = False
            last_close = False

            for i in range(index + 2, len(text)):
                if text[i] == "(":
                    if last_open:
                        count += 1
                        last_open = False
                    else:
                        last_open = True
                else:
                    last_open = False

                if text[i] == ")":
                    if last_close:
                        count -= 1
                        last_close = False
                    else:
                        last_close = True
                else:
                    last_close = False

                if count == 0:
                    start = i + 1
                    blocks.append(Block(index, text[index : start]))
                    break

            # Mis-matched number of blocks
            if count != 0:
                break

        return blocks

class Siter:
    def __init__(self, arg):
        self.arg_force = arg == "force"

        self.pages_dir = "siter-pages/"
        self.template_dir = "siter-template/"

        for d in [self.pages_dir, self.template_dir]:
            if not os.path.isdir(d):
                self.error("Can't find dir {0}".format(d))

    def error(self, e):
        print "[   Error!   ] {0}".format(e)
        sys.exit(1)

    def evaluate_text(self, text, bindings):
        re_use = re.compile("s\.use\s+([\w\.\-]+)\s*(.*)$", re.DOTALL)

        for block in Block.extract_blocks(text):
            use = re_use.match(block.content)

            if use:
                name = use.group(1)
                args = use.group(2)
            else:
                continue

            if not name in bindings:
                text = text.replace(block.whole, "", 1)
                print "[ Can't find ] {0}".format(name)
                continue

            (params, body) = bindings[name]

            bindings2 = dict(bindings)

            # Avoid infinite recursion
            del bindings2[name]

            if len(params) > 0:
                arg_blocks = Block.extract_blocks(args)

                if len(arg_blocks) != len(params):
                    self.error("{0} expects {1} arguments, got {2}"
                        .format(name, len(params), len(arg_blocks)))

                arguments = []

                # Evaluate each argument
                for arg_block in arg_blocks:
                    arg = self.evaluate_text(arg_block.content, bindings2)
                    arguments.append(arg)

                # Replace every instance of a parameter with the supplied argument
                for i in range(len(arguments)):
                    for m in re.finditer("\(\(s\.use\s+" + params[i] + "\s*\)\)", body, re.DOTALL):
                        body = body.replace(m.group(), arguments[i], 1)

            # Evaluate the body itself, then replace the ((block)) with it
            body = self.evaluate_text(body, bindings2)
            text = text.replace(block.whole, body, 1)

        return text

    def get_bindings(self, read_file):
        re_var = re.compile("s\.var\s+([\w\.\-]+)\s*\(\((.*)\)\)$", re.DOTALL)
        re_fun = re.compile("s\.fun\s+([\w\.\-]+)\s*\(\((.*)\)\)\s*\(\((.*)\)\)$", re.DOTALL)

        with open(read_file, "rU") as f:
            text = f.read()

        start = 0

        # "name" -> ([params], body)
        bindings = {}

        for block in Block.extract_blocks(text):
            var = re_var.match(block.content)
            fun = re_fun.match(block.content)

            if var:
                name = var.group(1)
                bindings[name] = ([], var.group(2))
            elif fun:
                name = fun.group(1)
                params = [p for p in re.split("\s+", fun.group(2).strip())]
                body = fun.group(3)
                bindings[name] = (params, body)
            else:
                self.error("Block is neither variable nor function\n{0}"
                    .format(block.whole))

        return bindings

    def apply_template(self, name, bindings):
        template_file = self.template_dir + name

        if not os.path.isfile(template_file):
            self.error("Can't find page template {0}".format(template_file))

        with open(template_file, "rU") as f:
            template = f.read()

        # This way paths work in both the template dir and in generated pages
        template = template.replace('="./', '="siter-template/')

        return self.evaluate_text(template, bindings)

    def up_to_date(self, read_file, write_file):
        if not self.arg_force and os.path.isfile(write_file):
            read_date = os.stat(read_file).st_mtime
            write_date = os.stat(write_file).st_mtime

            return read_date < write_date
        else:
            return False

    def run(self):
        pages = os.listdir(self.pages_dir)
        pages.sort(key = lambda p: p)

        for p in pages:
            read_file = self.pages_dir + p
            write_file = p

            if os.path.isdir(read_file):
                print "[  Skip dir  ] " + p
                continue

            if self.up_to_date(read_file, write_file):
                print "[ Up to date ] " + write_file
                continue

            print "[  Updating  ] " + write_file

            # Go through page file and extract s.var and s.fun bindings
            bindings = self.get_bindings(read_file)

            # Built-in bindings - "name" -> ([params], body)
            bindings["s.modified"] = ([], time.strftime("%Y.%m.%d", time.localtime(os.stat(read_file).st_mtime)))
            bindings["s.generated"] = ([], time.strftime("%Y.%m.%d"))

            # Load template and replace s.use instances with bindings
            page = self.apply_template("page.html", bindings)

            with open(write_file, "w") as f:
                f.write(page)

if __name__ == "__main__":
    siter = Siter(sys.argv[1] if len(sys.argv) > 1 else None)
    siter.run()
